import{_ as i,r as o,o as c,c as l,a as n,b as s,d as e,e as t}from"./app.35e23baf.js";const p={},r=n("h1",{id:"查看与升级版本",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#查看与升级版本","aria-hidden":"true"},"#"),s(" 查看与升级版本")],-1),d={href:"https://stackoverflow.com/questions/13790592/how-to-upgrade-git-on-windows-to-the-latest-version",target:"_blank",rel:"noopener noreferrer"},u=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看版本</span>
<span class="token function">git</span> <span class="token parameter variable">--version</span>
<span class="token comment"># 升级 windows git</span>
<span class="token function">git</span> update-git-for-windows                                                                                                                 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>版本 &gt; 2.16.1 则使用： git update-git-for-windows 版本 2.14.2-2.16.1 则使用： git update 版本 &lt;2.14.2 请重新下载安装覆盖</p></blockquote><p>命令执行完毕后弹出 <code>git 安装弹窗</code>, 根据提示进行安装即可</p>`,3),h={href:"https://git-scm.com/",target:"_blank",rel:"noopener noreferrer"},m=t(`<hr><h1 id="安装与配置相关" tabindex="-1"><a class="header-anchor" href="#安装与配置相关" aria-hidden="true">#</a> 安装与配置相关</h1><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><h3 id="linux" tabindex="-1"><a class="header-anchor" href="#linux" aria-hidden="true">#</a> Linux</h3><p><code>Debian/Ubuntu</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 更新源</span>
<span class="token function">apt</span> update 	<span class="token comment"># 只检查,不更新</span>
<span class="token function">apt</span> upgrade	<span class="token comment"># 更新已安装的软件包</span>
<span class="token comment"># 安装最新版本的 git</span>
<span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">git</span>
<span class="token comment"># For Ubuntu, this PPA provides the latest stable upstream Git version</span>
add-apt-repository ppa:git-core/ppa
<span class="token function">apt</span> update
<span class="token function">apt</span> <span class="token function">install</span> <span class="token function">git</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="ppa" tabindex="-1"><a class="header-anchor" href="#ppa" aria-hidden="true">#</a> PPA</h4>`,8),b={href:"https://zhuanlan.zhihu.com/p/55250294",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.ubuntupit.com/what-is-ppa-in-ubuntu-linux-and-how-do-i-use-them/",target:"_blank",rel:"noopener noreferrer"},g=t("<hr><p><code>PPA</code> 表示 <em>个人软件包存档(<code>Personal Package Archive</code>)</em>。</p><blockquote><p>在这里注意 “个人” 这个词，它暗示了这是开发人员独有的东西，并没有得到分发的正式许可。</p></blockquote><hr><p>软件仓库是一组文件，其中包含各种软件及其版本的信息，以及校验和等其他一些详细信息。每个版本的 Ubuntu 都有自己的四个官方软件仓库：</p><ul><li><code>Main</code> - Canonical 支持的自由开源软件。</li><li><code>Universe</code> - 社区维护的自由开源软件。</li><li><code>Restricted</code> - 设备的专有驱动程序。</li><li><code>Multiverse</code> - 受版权或法律问题限制的软件。</li></ul><hr><p>PPA 基本上是一个包含软件信息的网址, 这些信息存储在 <code>/etc/apt</code> 目录中的 <code>sources.list</code> 文件中</p>",8),k=n("code",null,"sudo apt update",-1),f={href:"https://link.zhihu.com/?target=https%3A//wiki.debian.org/Apt",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"sudo apt install package_name",-1),x=t(`<p>如果软件仓库中没有关于某个包的信息, 将会报错</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>E: Unable to <span class="token function">locate</span> package
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><p>Ubuntu 对系统中的软件进行管理，更重要的是控制你在系统上获得哪个版本的软件</p><p>Ubuntu 不会立即提供该新版本的软件。需要一个步骤来检查此新版本的软件是否与系统兼容，从而可以确保系统的稳定性。</p><p>这就需要 PPA</p><hr><p>Ubuntu 提供了一个名为 Launchpad 的平台，使软件开发人员能够创建自己的软件仓库。终端用户，也就是你，可以将 PPA 仓库添加到 <code>sources.list</code> 文件中，当你更新系统时，你的系统会知道这个新软件的可用性，然后你可以使用标准的 <code>sudo apt install</code> 命令安装它。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 将 PPA 仓库添加到列表中</span>
<span class="token function">sudo</span> add-apt-repository ppa:dr-akulavich/lighttable
<span class="token comment"># 更新可以在当前系统上安装的软件包列表。</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token comment"># 安装软件包。</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> lighttable-installer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">&quot;GitHub绑定邮箱&quot;</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">&quot;GitHub用户名&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h1 id="仓库相关" tabindex="-1"><a class="header-anchor" href="#仓库相关" aria-hidden="true">#</a> 仓库相关</h1><p>查看远程仓库地址</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> remote <span class="token parameter variable">-v</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h2 id="常规操作" tabindex="-1"><a class="header-anchor" href="#常规操作" aria-hidden="true">#</a> 常规操作</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># stage 当前所有修改</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
<span class="token comment"># commit 并加备注</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;备注&quot;</span>
<span class="token comment"># 推送到 origin master</span>
<span class="token function">git</span> push origin master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="分支操作" tabindex="-1"><a class="header-anchor" href="#分支操作" aria-hidden="true">#</a> 分支操作</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 新建并转移到 bugFix 分支</span>
<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> bugFix
<span class="token comment"># 提交</span>
<span class="token function">git</span> commit
<span class="token comment"># 返回 master 分支</span>
<span class="token function">git</span> checkout master
<span class="token comment"># 拉取主分支更新(并处理冲突)</span>
<span class="token function">git</span> pull
<span class="token comment"># 返回 bugFix 分支, 合并 master 分支更新</span>
<span class="token function">git</span> checkout bugFix
<span class="token function">git</span> merge master
<span class="token function">git</span> push
<span class="token comment"># 合并 bugFix 分支</span>
<span class="token function">git</span> merge bugFix
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h1 id="relations" tabindex="-1"><a class="header-anchor" href="#relations" aria-hidden="true">#</a> relations</h1><h2 id="code996" tabindex="-1"><a class="header-anchor" href="#code996" aria-hidden="true">#</a> code996</h2>`,25),y={href:"https://github.com/hellodigua/code996",target:"_blank",rel:"noopener noreferrer"},P=n("p",null,"code996 是一个分析工具，它可以统计 Git 项目的 commit 时间分布，进而推导出这个项目的编码工作强度。",-1),w={href:"https://hellodigua.github.io/code996/",target:"_blank",rel:"noopener noreferrer"},A=t(`<p>Mac 或 Linux 用户：</p><p><strong>在 Git 项目的根目录</strong>，执行以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://fastly.jsdelivr.net/gh/hellodigua/code996/bin/code996.sh <span class="token operator">|</span> <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>或者下载 <code>https://fastly.jsdelivr.net/gh/hellodigua/code996/bin/code996.sh</code> 后直接 <code>bash code996.sh</code></p></blockquote><p>Windows 用户：</p><p>下载该脚本 <code>https://fastly.jsdelivr.net/gh/hellodigua/code996/bin/code996.sh</code></p><p>然后将该脚本移至要分析的 Git 项目目录，并执行以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>iwr https://fastly.jsdelivr.net/gh/hellodigua/code996/bin/code996.ps1 <span class="token parameter variable">-OutFile</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>System.IO.Path<span class="token punctuation">]</span>::Combine<span class="token punctuation">(</span><span class="token punctuation">[</span>System.IO.Path<span class="token punctuation">]</span>::GetTempPath<span class="token punctuation">(</span><span class="token punctuation">)</span>, <span class="token string">&#39;code996.ps1&#39;</span><span class="token punctuation">))</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>System.IO.Path<span class="token punctuation">]</span>::Combine<span class="token punctuation">(</span><span class="token punctuation">[</span>System.IO.Path<span class="token punctuation">]</span>::GetTempPath<span class="token punctuation">(</span><span class="token punctuation">)</span>, <span class="token string">&#39;code996.ps1&#39;</span><span class="token punctuation">))</span><span class="token punctuation">;</span> ri <span class="token punctuation">(</span><span class="token punctuation">[</span>System.IO.Path<span class="token punctuation">]</span>::Combine<span class="token punctuation">(</span><span class="token punctuation">[</span>System.IO.Path<span class="token punctuation">]</span>::GetTempPath<span class="token punctuation">(</span><span class="token punctuation">)</span>, <span class="token string">&#39;code996.ps1&#39;</span><span class="token punctuation">))</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,8),q=n("p",null,"需要使用 PowerShell 7 或更高版本",-1),G={href:"https://github.com/Ayusummer/DailyNotes/blob/main/%E9%80%9A%E8%AF%86/%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3.md#powershell-7",target:"_blank",rel:"noopener noreferrer"},B=n("hr",null,null,-1),E=n("h1",{id:"learngitbranching",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#learngitbranching","aria-hidden":"true"},"#"),s(" learnGitBranching")],-1),S={href:"https://github.com/pcottle/learnGitBranching",target:"_blank",rel:"noopener noreferrer"},U={href:"https://gitee.com/ayusummer233/learnGitBranching",target:"_blank",rel:"noopener noreferrer"},F=n("p",null,[n("img",{src:"http://cdn.ayusummer233.top/img/202208261947482.png",alt:"image-20220826194715403"})],-1),I=n("p",null,"选择一台设备装好 Python 和 nodejs+yarn 并配置好 Git, 本次试验环境为 ubuntu16.04",-1),L={href:"https://github.com/Ayusummer/DailyNotes/blob/main/%E5%89%8D%E7%AB%AF/%E9%80%9A%E8%AF%86.md#ubuntu-%E5%AE%89%E8%A3%85-yarn",target:"_blank",rel:"noopener noreferrer"},T=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Ubuntu 安装 nodejs 16</span>
<span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://deb.nodesource.com/setup_16.x <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token parameter variable">-E</span> <span class="token function">bash</span> -
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> nodejs
<span class="token comment"># 持久换淘宝源</span>
<span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org
<span class="token comment"># 查看换源是否生效</span>
<span class="token function">npm</span> config get registry

<span class="token comment"># 安装 yarn</span>
<span class="token function">curl</span> <span class="token parameter variable">-sS</span> https://dl.yarnpkg.com/debian/pubkey.gpg <span class="token operator">|</span> <span class="token function">sudo</span> apt-key <span class="token function">add</span> -
<span class="token builtin class-name">echo</span> <span class="token string">&quot;deb https://dl.yarnpkg.com/debian/ stable main&quot;</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/apt/sources.list.d/yarn.list
<span class="token function">sudo</span> <span class="token function">apt</span> update
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">yarn</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),j=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># clone 仓库</span>
<span class="token function">git</span> clone https://gitee.com/ayusummer233/learnGitBranching.git
<span class="token comment"># 安装依赖</span>
<span class="token function">yarn</span> <span class="token function">install</span>
<span class="token function">yarn</span> gulp fastBuild <span class="token comment"># skips tests and linting, faster build</span>
<span class="token function">yarn</span> gulp build <span class="token comment"># runs tests and lint</span>
<span class="token comment"># 使用 screen 创建一个窗口(或者使用 tmux 或者 zellij 均可)</span>
<span class="token function">screen</span> <span class="token parameter variable">-S</span> gitLearn
<span class="token comment"># 使用 Python http.server 部署到本地 9222 端口(或随便换个自己喜欢的端口)</span>
python <span class="token parameter variable">-m</span> http.server <span class="token number">9222</span>
<span class="token comment"># Ctrl A D 挂起当前 screen</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h1 id="报错收集" tabindex="-1"><a class="header-anchor" href="#报错收集" aria-hidden="true">#</a> 报错收集</h1><hr><h2 id="fatal-authentication-failed" tabindex="-1"><a class="header-anchor" href="#fatal-authentication-failed" aria-hidden="true">#</a> fatal: Authentication failed</h2>`,5),D={href:"https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/",target:"_blank",rel:"noopener noreferrer"},O={href:"https://docs.github.com/cn/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token",target:"_blank",rel:"noopener noreferrer"},C=t('<p><code>remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead. remote: Please see https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information. fatal: Authentication failed for &#39;https://github.com/Ayusummer/vue-vben-admin.git/&#39;</code></p><p><img src="http://cdn.ayusummer233.top/img/202205032126873.png" alt="image-20220503212613312"></p><p><img src="http://cdn.ayusummer233.top/img/202205032129065.png" alt="image-20220503212933997"></p><p>需要在 github 上创建一个私有的 access token 来用</p><p><img src="http://cdn.ayusummer233.top/img/202205032130796.png" alt="image-20220503213035692"></p><p><img src="http://cdn.ayusummer233.top/img/202205032131211.png" alt="image-20220503213144120"></p><p>填写自拟的token名并设置过期时间以及权限后点击页面左下角的 <code>Generate token</code>创建即可</p><blockquote><p><strong>Warning:</strong> Treat your tokens like passwords and keep them secret. When working with the API, use tokens as environment variables instead of hardcoding them into your programs.</p></blockquote><p>然后就可以通过 <code>username</code> 和 <code>token</code> 来进行一些权限操作了</p>',9);function z(H,N){const a=o("ExternalLinkIcon");return c(),l("div",null,[r,n("blockquote",null,[n("p",null,[n("a",d,[s("How to upgrade Git on Windows to the latest version - Stack Overflow"),e(a)])])]),u,n("blockquote",null,[n("p",null,[s("通过命令行下载慢的话可以选择 "),n("a",h,[s("Git (git-scm.com)"),e(a)]),s(" 下载 exe 执行更新即可")])]),m,n("blockquote",null,[n("p",null,[n("a",b,[s("Ubuntu PPA 使用指南 - 知乎 (zhihu.com)"),e(a)]),s("[==很详细==]")]),n("p",null,[n("a",v,[s("What is PPA in Ubuntu Linux and How Do I Use Them (ubuntupit.com)"),e(a)])])]),g,n("p",null,[s("当运行 "),k,s(" 命令时，系统将使用 "),n("a",f,[s("APT 工具"),e(a)]),s(" 来检查软件仓库并将软件及其版本信息存储在缓存中。当使用 "),_,s(" 命令时，它通过该信息从实际存储软件的网址获取该软件包")]),x,n("blockquote",null,[n("p",null,[n("a",y,[s("hellodigua/code996: code996 是一个分析工具，它可以统计 Git 项目的 commit 时间分布，进而推导出这个项目的编码工作强度 (github.com)"),e(a)])]),P]),n("p",null,[n("a",w,[s("Preview"),e(a)])]),A,n("blockquote",null,[q,n("p",null,[n("a",G,[s("PowerShell 7相关"),e(a)])])]),B,E,n("blockquote",null,[n("p",null,[n("a",S,[s("pcottle/learnGitBranching: An interactive git visualization and tutorial. Aspiring students of git can use this app to educate and challenge themselves towards mastery of git! (github.com)"),e(a)])])]),n("p",null,[s("Github 仓库拉取速度可能会比较慢, 所以可以将其导入到 Gitee 仓库中: "),n("a",U,[s("learnGitBranching: https://github.com/pcottle/learnGitBranching 学习 Git, 用于个人部署 (gitee.com)"),e(a)])]),F,I,n("blockquote",null,[n("p",null,[n("a",L,[s("Ubuntu 安装 yarn 可参考此项"),e(a)])]),T]),j,n("blockquote",null,[n("p",null,[n("a",D,[s("Token authentication requirements for Git operations | The GitHub Blog"),e(a)])]),n("p",null,[n("a",O,[s("Creating a personal access token - GitHub Docs"),e(a)])])]),C])}const V=i(p,[["render",z],["__file","index.html.vue"]]);export{V as default};
